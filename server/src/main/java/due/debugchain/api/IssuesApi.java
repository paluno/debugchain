/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package due.debugchain.api;

import io.swagger.annotations.*;
import due.debugchain.api.model.Issue;
import due.debugchain.api.model.IssueReviewer;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-06-05T11:48:51.982+02:00")

@Api(value = "issues", description = "the issues API")
public interface IssuesApi {

    @ApiOperation(value = "Get an issues", nickname = "getIssueById", notes = "Get an issues by id", response = Issue.class, tags={ "issues", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Issue was returned successfully", response = Issue.class),
        @ApiResponse(code = 404, message = "No issue with this id found") })
    @RequestMapping(value = "/issues/{issueId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Issue> getIssueById(@ApiParam(value = "The id of the issue", required = true) @PathVariable("issueId") Integer issueId);


    @ApiOperation(value = "Get the reviewers of an issue", nickname = "getIssueReviewers", notes = "Get the reviewers of an issue, which are assigned for this issue", response = IssueReviewer.class, responseContainer = "List", tags={ "issues", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Reviewers were returned successfully", response = IssueReviewer.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "No reviewers assigned or no issue with this id found") })
    @RequestMapping(value = "/issues/{issueId}/reviewers",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<IssueReviewer>> getIssueReviewers(@ApiParam(value = "The id of the issue", required = true) @PathVariable("issueId") Integer issueId);


    @ApiOperation(value = "Get all issues", nickname = "getIssues", notes = "Get all issues which are tracked in the debugchain", response = Issue.class, responseContainer = "List", tags={ "issues", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Issues were returned successfully", response = Issue.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "No issues found") })
    @RequestMapping(value = "/issues",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Issue>> getIssues(@ApiParam(value = "A searchterm for searching and filtering the issues") @Valid @RequestParam(value = "searchterm", required = false) Integer searchterm);

}
