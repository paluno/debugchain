/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package due.debugchain.api;

import io.swagger.annotations.*;
import due.debugchain.api.model.Project;
import due.debugchain.api.model.ProjectReviewer;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-06-05T11:48:51.982+02:00")

@Api(value = "projects", description = "the projects API")
public interface ProjectsApi {

    @ApiOperation(value = "Get a project", nickname = "getProjectById", notes = "Get a project by id", response = Project.class, tags={ "projects", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Project was returned successfully", response = Project.class),
        @ApiResponse(code = 404, message = "No project with this id found") })
    @RequestMapping(value = "/projects/{projectId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Project> getProjectById(@ApiParam(value = "The id of the project", required = true) @PathVariable("projectId") Integer projectId);


    @ApiOperation(value = "Get the reviewers of a project", nickname = "getProjectReviewers", notes = "Get the reviewers of a project, which are assigned for this project", response = ProjectReviewer.class, responseContainer = "List", tags={ "projects", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Reviewers were returned successfully", response = ProjectReviewer.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "No reviewers assigned or no project with this id found") })
    @RequestMapping(value = "/projects/{projectId}/reviewers",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<ProjectReviewer>> getProjectReviewers(@ApiParam(value = "The id of the project", required = true) @PathVariable("projectId") Integer projectId);


    @ApiOperation(value = "Get all projects", nickname = "getProjects", notes = "Get all projects which are tracked by a debugchain-contract", response = Project.class, responseContainer = "List", tags={ "projects", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Projects were returned successfully", response = Project.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "No issues found") })
    @RequestMapping(value = "/projects",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Project>> getProjects(@ApiParam(value = "A searchterm for searching and filtering the projects") @Valid @RequestParam(value = "searchterm", required = false) String searchterm);

}
